// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "NodeFilterDialog.H"
#include "NodeFilterFrei0rFactoryPlugin.H"
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

void NodeFilterDialog::cb_plugin_browser_i(Fl_Hold_Browser* o, void*) {
  if ( o->value() <= 0 ) {
	return;
}
INodeFilterFactoryPlugin* ffp = (INodeFilterFactoryPlugin*)o->data(o->value());
if ( ffp ) {
	graph_editor->addNode( ffp );
};
}
void NodeFilterDialog::cb_plugin_browser(Fl_Hold_Browser* o, void* v) {
  ((NodeFilterDialog*)(o->parent()->parent()->user_data()))->cb_plugin_browser_i(o,v);
}

void NodeFilterDialog::cb_graph_editor_i(Frei0rGraphEditor*, void*) {
  nle::g_videoView->redraw();
nle::g_timeline->changing();
}
void NodeFilterDialog::cb_graph_editor(Frei0rGraphEditor* o, void* v) {
  ((NodeFilterDialog*)(o->parent()->parent()->parent()->user_data()))->cb_graph_editor_i(o,v);
}

void NodeFilterDialog::cb_Close_i(Fl_Return_Button*, void*) {
  delete this;
}
void NodeFilterDialog::cb_Close(Fl_Return_Button* o, void* v) {
  ((NodeFilterDialog*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_trash[] = {
"16 16 4 1",
" \tc None",
".\tc #000000",
"+\tc #B3B3B3",
"@\tc #404040",
"     .......    ",
"   ...+++++...  ",
"  ..+++...+++.. ",
" ..+++.+++.+++..",
" ..+++++++++++..",
"  ..+++++++++.. ",
"  ....+++++.... ",
"  .++.......++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  ..+@++@++@+.. ",
"   ...++@++...  ",
"     .......    "
};
static Fl_Pixmap image_trash(idata_trash);

void NodeFilterDialog::cb_Save_i(Fl_Button*, void*) {
  char* filename = fl_file_chooser( "Open Node Preset", 0, 0 );

if ( filename ) {
	struct stat statbuf;
	int r = stat( filename, &statbuf );
	if ( r == 0 ) {
		r = fl_choice( "File exists, replace?\nWill be overwritten.", "&Cancel", "&Replace", 0 );
		if ( r == 0 ) {
			return;
		}
	}
	TiXmlDocument doc( filename );
	TiXmlDeclaration* dec = new TiXmlDeclaration( "1.0", "", "no" );
	doc.LinkEndChild( dec );
	TiXmlElement* graph = new TiXmlElement( "open_movie_editor_node_graph" );
	doc.LinkEndChild( graph );
	m_filter->writeXML( graph );
	doc.SaveFile();
	
};
}
void NodeFilterDialog::cb_Save(Fl_Button* o, void* v) {
  ((NodeFilterDialog*)(o->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void NodeFilterDialog::cb_Load_i(Fl_Button*, void*) {
  char* filename = fl_file_chooser( "Open Node Preset", 0, 0 );

if ( filename ) {
	TiXmlDocument doc( filename );
	if ( doc.LoadFile() ) {
		TiXmlHandle docH( &doc );
		TiXmlElement* graph = docH.FirstChild( "open_movie_editor_node_graph" ).Element();
		if ( graph ) {
			m_filter->readXML( graph );
			graph_editor->init_all_widgets();
		}
	}
};
}
void NodeFilterDialog::cb_Load(Fl_Button* o, void* v) {
  ((NodeFilterDialog*)(o->parent()->parent()->user_data()))->cb_Load_i(o,v);
}

NodeFilterDialog::NodeFilterDialog( nle::NodeFilter* filter ) {
  m_factory = g_node_filter_frei0r_factory;
  { m_dialog = new Fl_Double_Window(650, 495, "Node Editor");
    m_dialog->user_data((void*)(this));
    { Fl_Tile* o = new Fl_Tile(5, 55, 640, 375);
      { plugin_browser = new Fl_Hold_Browser(5, 55, 280, 375);
        plugin_browser->box(FL_NO_BOX);
        plugin_browser->color(FL_BACKGROUND2_COLOR);
        plugin_browser->selection_color(FL_SELECTION_COLOR);
        plugin_browser->labeltype(FL_NORMAL_LABEL);
        plugin_browser->labelfont(0);
        plugin_browser->labelsize(14);
        plugin_browser->labelcolor(FL_FOREGROUND_COLOR);
        plugin_browser->callback((Fl_Callback*)cb_plugin_browser);
        plugin_browser->align(FL_ALIGN_BOTTOM);
        plugin_browser->when(FL_WHEN_RELEASE_ALWAYS);
      } // Fl_Hold_Browser* plugin_browser
      { Fl_Scroll* o = new Fl_Scroll(285, 55, 360, 375);
        o->box(FL_DOWN_FRAME);
        { graph_editor = new Frei0rGraphEditor(285, 55, 2000, 2000);
          graph_editor->box(FL_FLAT_BOX);
          graph_editor->color(FL_BACKGROUND_COLOR);
          graph_editor->selection_color(FL_BACKGROUND_COLOR);
          graph_editor->labeltype(FL_NORMAL_LABEL);
          graph_editor->labelfont(0);
          graph_editor->labelsize(14);
          graph_editor->labelcolor(FL_FOREGROUND_COLOR);
          graph_editor->callback((Fl_Callback*)cb_graph_editor);
          graph_editor->align(FL_ALIGN_CENTER);
          graph_editor->when(FL_WHEN_RELEASE);
        } // Frei0rGraphEditor* graph_editor
        o->end();
      } // Fl_Scroll* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Tile* o
    { Fl_Box* o = new Fl_Box(0, 0, 650, 50, "Node Editor");
      o->labelfont(1);
      o->labelsize(16);
    } // Fl_Box* o
    { Fl_Return_Button* o = new Fl_Return_Button(5, 465, 640, 25, "Close");
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Return_Button* o
    { Fl_Group* o = new Fl_Group(5, 435, 640, 25);
      { Fl_Check_Button* o = new Fl_Check_Button(5, 435, 455, 25, "Bypass");
        o->down_box(FL_DOWN_BOX);
        o->hide();
        Fl_Group::current()->resizable(o);
      } // Fl_Check_Button* o
      { trash_can = new Fl_Button(620, 435, 25, 25);
        trash_can->image(image_trash);
      } // Fl_Button* trash_can
      { Fl_Button* o = new Fl_Button(460, 435, 80, 25, "Save ...");
        o->callback((Fl_Callback*)cb_Save);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(540, 435, 80, 25, "Load...");
        o->callback((Fl_Callback*)cb_Load);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    m_dialog->end();
  } // Fl_Double_Window* m_dialog
  m_filter = filter;
plugin_browser->add( m_bezier_curve_factory.name(), (void*)&m_bezier_curve_factory );
plugin_browser->add( m_preview_factory.name(), (void*)&m_preview_factory );
for ( effect_node* p = m_factory->m_effects; p; p = p->next ) {
	plugin_browser->add( p->effect->name(), (void*)p->effect );
}
graph_editor->m_trash = trash_can;
graph_editor->setFilter( m_filter );
}

NodeFilterDialog::~NodeFilterDialog() {
  m_filter->m_dialog = 0;
m_dialog->hide();
delete m_dialog;
}

void NodeFilterDialog::show() {
  m_dialog->show();
}

int NodeFilterDialog::shown() {
  return m_dialog->shown();
}
